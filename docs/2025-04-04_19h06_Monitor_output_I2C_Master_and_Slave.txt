Friday 2025-04-04 19h06 utc+1

(c) 2025 Paulus Schulinck (Github @PaulskPt)
License: MIT

IDE Arduino v2.3.5

Boards:
Master: M5Stack Cardputer;
Sketch: M5Cardputer_text_to_M5Echo.ino

Slave:  M5Stack Atom Echo,
M5Echo_I2C_text_rx_to_morse.ino 

NOTES:

This run of both sketches (resp. in the master device and in the slave device) is to test
the following added functionality:

a) start a standard morse code test, sending for one minute the word "paris" in morse code 
   upon receiving a MORSE_GO command message from the Master device.
b) to stop an ongoing sending of the "paris" morse code test
   upon receiving a MORSE_END command message from the Master device.

This test confirmed that it works!

During a sending of morse code with every loop the program will test check for interruptions:
- by a button press;
- by polling for reception of data via the I2C line. A command type message has only 6 bytes.
  when polling of I2C results in a reception of a message of 6 bytes length, the programm will call 
  the function handle_rx(nrBytes). In the case of reception of a command type message, handle_rx 
  will investigate which type of command has been received from the master device. If the command is 
  MORSE_END then the cmd_morse_end_flag will be set. Next, back in the function send_morse(), this 
  function will be left if the cmd_morse_end_flag was set.
  
Conclusion: Now we have a reliable means let the master device control (also) 
            start and stop of sending morse code by the slave device.

-----------------------------------------------------------------------------------------------------

MASTER DEVICE Serial Monitor output:

setup(): M5Stack Cardputer v1.0.
I2C test
to send text for morse code 
and to send speed change commands
to a M5Stack Atom Echo device.
setup(): Board type: 14
setup(): I2C Pins set successfull.
setup(): setting I2C buffersize to 42 successfull.
setup(): Successfully connected onto I2C bus nr: 0.
handle_kbd_input(): <ctrl> pressed
handle_kbd_input(): data = > g
handle_kbd_input(): <ctrl> active + 'g' pressed
send_cmd(): I2C_DEV_ADDR = 0x55, TXpacketNr = 14386, msgType = CMD_MESSAGE, cmd = CMD_MORSE_GO 
send_cmd(): length of message = 6
send_cmd(): Going to send command message: 0x55, 0x38, 0x32, 0xfc, 0xca, 
send_cmd(): command message sent. Number of bytes sent: 6                                        <<<=== CMD type msg MORSE_GO sent
handle_kbd_input(): <ctrl> pressed
handle_kbd_input(): data = > e
handle_kbd_input(): <ctrl> active + 'e' pressed
send_cmd(): I2C_DEV_ADDR = 0x55, TXpacketNr = 14387, msgType = CMD_MESSAGE, cmd = CMD_MORSE_END
send_cmd(): length of message = 6
send_cmd(): Going to send command message: 0x55, 0x38, 0x33, 0xfc, 0xcb, 
send_cmd(): command message sent. Number of bytes sent: 6                                        <<<=== CMD type msg MORSE_END sent

-----------------------------------------------------------------------------------------------------

SLAVE DEVICE Serial Monitor output:

ets Jun  8 2016 00:22:57

rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
configsip: 188777542, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DIO, clock div:1
load:0x3fff0030,len:1184
load:0x40078000,len:13260
load:0x40080400,len:3028
entry 0x400805e4
M5At
M5Stack M5Atom Echo
I2C test
to receive text for morse code 
and to receive speed change commands
from a M5Stack Cardputer device.

setup(): Board type: M5Atom Echo
setup(): I2C Pins set successfull.
setting I2C buffersize to 42 successfull.
setup(): Successfully connected onto I2C bus nr: 0.
E (4102) I2S: i2s_driver_uninstall(2048): I2S port 0 has not installed

loop(): entering the while loop...
loop(): ESP.getFreeHeap = 302596

poll_I2C(): Nr of bytes available in msg via Wire (I2C) 6
handle_rx(): received nr of bytes: 6
handle_rx(): rcvd correct destination address: 0x55
handle_rx(): RXpacketNr: 14386
handle_rx(): type of message: CMD_MESSAGE
handle_rx(): type of command: CMD_MORSE_GO ('paris')                               <<<=== MORSE_GO received
send_morse(): Starting...
tone dot (and dash) frequency = 1200 Hz
tone_dot.modal  = true
tone_dash.modal = true
dot_dash_time(): tone_dot.time_ms  set to: 100 mSeconds
                 tone_dash.time_ms set to: 300 mSeconds
send_morse(): rx_buffer_idx = 6
send_morse(): going to send 'paris ', length = 6
Values for dly1, dly3 and dly7:
dly1: 50, dly3: 150, dly7: 350 mSeconds
 1) .|1|---|1|---|1|.| 3 |.|1|---| 3 |.|1|---|1|.| 3 |.|1|.| 3 |.|1|.|1|.|  7  |   <<<=== Start of sending morse code, word: 'paris '

 2) .|1|---|1|---|1|.| 3 |.|1|---| 3 |.|1|---|1|.| 3 |.|1|.| 3 |.|1|.|1|.|  7  |

 3) .|1|---|1|---|1|.| 3 |.|1|---| 3 |.|1|---|1|.| 3 |
poll_I2C(): Nr of bytes available in msg via Wire (I2C) 6                          <<<=== Polled I2C, result: there is a msg of 6 bytes!
handle_rx(): received nr of bytes: 6
handle_rx(): rcvd correct destination address: 0x55
handle_rx(): RXpacketNr: 14387
handle_rx(): type of message: CMD_MESSAGE
handle_rx(): type of command: CMD_MORSE_END ('paris')                              <<<=== Command MORSE_END received.

send_morse(): CMD morse end recived. Exiting function.                             <<<=== The sending of morse code is ended.

------------------------------------------------------------------------


